Recently Oz has found a magical string consisting of single digit "1". After experimenting on the string, Oz found a weird magical property of the string that is whenever he touches the string then each digit "1" of string changed to digit "0" and each digit "0" of string changed to "01". Oz found this property interesting and immediately asked a question to RK : "How many 1's and 0's will be in the magical string if he touches the string M times ?"

Input :

The first line contains the number of test cases T . Each test case consists of a positive integer - M .

Output :

For each test case output two space-separated integers, number of 1's and number of 0's in the magical string if Oz touches the string M times.

Constraints :

1<= T <=20

1<= M <=90

SAMPLE INPUT 
2
1
2
SAMPLE OUTPUT 
0 1
1 1

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



// Sample code to perform I/O:


#include <stdio.h>

long long touch0( long int );
long long touch1(long int );

 long long  int   ar0[150];
  long long int  ar1[150];
int main(){
      // Writing output to STDOUT
      
long  int a,b,c,d,e=0,f=0,i;

long long int x,y;
      
      scanf("%ld",&a);
     
      for(i=0;i<a;i++)
      {
          scanf("%ld",&b);
          
          //touch1(b); touch0(b);
          
       
        
          
          printf("%lld %lld\n",touch1(b),touch0(b) );
          
         
         
      }
      
      
      
      
      
}


  long long int touch0 ( long int n)
{
   long long int x;
    if(n==1 || n==2)
    {
        return 1;
        }
        



else 
{
    if(ar0[n-1] == 0) 
    {
         ar0[n-1]=touch0(n-1);
    }
    
    if(ar0[n-2]==0)
    {
  
   ar0[n-2]=touch0(n-2);
   
   //x=ar0[n-1]+ar0[n-2];
    }
    
   ///x= ;
   
   
    return ar0[n-1]+ar0[n-2];
       // x= touch0(n-1)+touch0(n-2);
    
}

  

}


 long long int touch1( long int n)
{
   long long int x;
    
    if(n==1)
    {
        return 0;
    }
    
    if(n==2)
    {
        return 1;
    }
    
    
    else
    { 
        if(ar1[n-1]==0 )
    {
         ar1[n-1]=touch1(n-1);
    }
    
    
   if(ar1[n-2] == 0)
    {
       
        ar1[n-2] = touch1(n-2);
        
        //x= ar1[n-1] + ar1[n-2];
    }
        
        
        //x=ar1[n-1]+ar1[n-2];
        //x=touch1(n-1)+touch1(n-2);
         return ar1[n-1]+ar1[n-2];
    }
    

  
}



// Write your code here
